def save_emails_from_senders_on_date(email_address, specific_date_str, sender_path_table, default_year, excluded_senders):
    logs = []
    pythoncom.CoInitialize()
    specific_date = datetime.datetime.strptime(specific_date_str, '%Y-%m-%d').date()
    outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
    inbox = None

    for store in outlook.Stores:
        if store.DisplayName.lower() == email_address.lower() or store.ExchangeStoreType == 3:
            try:
                root_folder = store.GetRootFolder()
                for folder in root_folder.Folders:
                    if folder.Name.lower() == "inbox":
                        inbox = folder
                        break
                if inbox is not None:
                    break
            except AttributeError as e:
                logs.append(f"Error accessing inbox: {str(e)}")
                continue

    if inbox is None:
        logs.append(f"No Inbox found for the account with the email address: {email_address}")
        pythoncom.CoUninitialize()
        with open(LOG_FILE_PATH, 'w', encoding='utf-8') as f:
            for log in logs:
                f.write(f"{log}\n")
        return

    items = inbox.Items
    items.Sort("[ReceivedTime]", True)
    items = items.Restrict(f"[ReceivedTime] >= '{specific_date.strftime('%m/%d/%Y')} 00:00 AM' AND [ReceivedTime] <= '{specific_date.strftime('%m/%d/%Y')} 11:59 PM'")

    total_emails = 0
    saved_default = 0
    saved_actual = 0
    not_saved = 0
    excluded_emails_count = 0
    failed_emails = []

    for item in items:
        total_emails += 1
        retries = 3
        processed = False

        if hasattr(item, 'SenderEmailAddress') or hasattr(item, 'Sender'):
            sender_email = item.SenderEmailAddress.lower() if hasattr(item, 'SenderEmailAddress') else item.Sender.Address.lower()
            if sender_email in excluded_senders:
                excluded_emails_count += 1
                continue

        while retries > 0 and not processed:
            try:
                if hasattr(item, 'SenderEmailAddress'):
                    sender_email = item.SenderEmailAddress.lower()
                elif hasattr(item, 'Sender'):
                    sender_email = item.Sender.Address.lower()
                else:
                    logs.append(f"Error: Email item has no sender address.")
                    failed_emails.append({'email_address': 'Unknown', 'subject': item.Subject})
                    not_saved += 1
                    break

                year, month = None, None
                year, month = extract_year_and_month(item.Subject, default_year)
                if not year or not month:
                    for attachment in item.Attachments:
                        year, month = extract_year_and_month(attachment.FileName, default_year)
                        if year and month:
                            break

                base_path, is_keyword_path, is_special_case = find_path_for_sender(sender_email, item.Subject, sender_path_table)
                if base_path:
                    # Ensure the base path exists
                    if not os.path.exists(base_path):
                        os.makedirs(base_path)

                    if is_special_case:
                        if item.Attachments.Count == 0:
                            logs.append(f"Skipping special case email with subject '{item.Subject}': No attachments.")
                            failed_emails.append({'email_address': sender_email, 'subject': item.Subject})
                            not_saved += 1
                            break

                        attachment_titles = [sanitize_filename(attachment.FileName) for attachment in item.Attachments]
                        combined_title = sanitize_filename(f"{item.Subject} {' '.join(attachment_titles)}")
                        filename = f"{combined_title}.msg"
                        save_path = os.path.join(base_path, filename)

                        item.SaveAs(save_path, 3)
                        logs.append(f"Saved special case: {filename} to {base_path}")
                        saved_actual += 1
                        processed = True
                    else:
                        if is_keyword_path:
                            if item.Attachments.Count == 0:
                                logs.append(f"Skipping email with subject '{item.Subject}': No attachments for keyword path.")
                                failed_emails.append({'email_address': sender_email, 'subject': item.Subject})
                                not_saved += 1
                                break
                            year = extract_year_for_keywords(item.Subject)
                            if not year:
                                year_month_path = base_path
                                logs.append(f"No year found, saving keyword email to base path: {year_month_path}")
                            else:
                                year_month_path = os.path.join(base_path, year)
                                logs.append(f"Determined keyword path: {year_month_path}")
                            save_type = 'keyword'
                        else:
                            year_month_path = os.path.join(base_path, year, month if month else "")
                            logs.append(f"Determined actual path: {year_month_path}")
                            save_type = 'actual'

                        if not os.path.exists(year_month_path):
                            os.makedirs(year_month_path)

                        subject = sanitize_filename(item.Subject)
                        filename = f"{subject}.msg"
                        item.SaveAs(os.path.join(year_month_path, filename), 3)
                        logs.append(f"Saved: {filename} to {year_month_path}")

                        if save_type == 'default':
                            saved_default += 1
                        else:
                            saved_actual += 1

                        processed = True
                else:
                    year_month_path = os.path.join(DEFAULT_SAVE_PATH, sender_email, year, month if month else "")
                    logs.append(f"Determined default path: {year_month_path}")

                    if not os.path.exists(year_month_path):
                        os.makedirs(year_month_path)

                    subject = sanitize_filename(item.Subject)
                    filename = f"{subject}.msg"
                    item.SaveAs(os.path.join(year_month_path, filename), 3)
                    logs.append(f"Saved: {filename} to {year_month_path}")

                    saved_default += 1
                    processed = True

            except pythoncom.com_error as com_err:
                error_code, _, error_message, _ = com_err.args
                logs.append(f"COM Error handling email with subject '{item.Subject}': {error_message} (Code: {error_code})")
                retries -= 1
                if retries == 0:
                    logs.append(f"Failed to save email '{item.Subject}' after 3 retries.")
                    failed_emails.append({'email_address': sender_email, 'subject': item.Subject})
                    not_saved += 1
            except Exception as e:
                logs.append(f"Error handling email with subject '{item.Subject}': {str(e)}")
                failed_emails.append({'email_address': sender_email, 'subject': item.Subject})
                not_saved += 1
                retries = 0

    pythoncom.CoUninitialize()
    with open(LOG_FILE_PATH, 'w', encoding='utf-8') as f:
        for log in logs:
            f.write(f"{log}\n")

    update_excel_summary(specific_date_str, total_emails, saved_default, saved_actual, not_saved, failed_emails, excluded_emails_count)
